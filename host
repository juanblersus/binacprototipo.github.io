// --- FILE: .gitignore ---
// Este archivo le dice a Git qué archivos y carpetas ignorar.

# Dependencias
/node_modules

# Archivos de build
/build
/dist

# Archivos de logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Archivos del sistema
.DS_Store
Thumbs.db

# Archivos de entorno (¡MUY IMPORTANTE!)
.env.local
.env.development.local
.env.test.local
.env.production.local

# Otros
.idea
.vscode


// --- FILE: package.json ---
// Define los metadatos del proyecto y las dependencias.

{
  "name": "binac-website",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "firebase": "^10.12.2",
    "lucide-react": "^0.395.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "recharts": "^2.12.7",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "tailwindcss": "^3.4.4"
  }
}


// --- FILE: tailwind.config.js ---
// Archivo de configuración para Tailwind CSS.

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


// --- FILE: public/index.html ---
// La única página HTML de la aplicación. React se inyectará aquí.

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Sitio web y panel financiero de BINAC"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>BINAC Prototipo</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


// --- FILE: src/index.css ---
// Archivo CSS principal para importar las directivas de Tailwind.

@tailwind base;
@tailwind components;
@tailwind utilities;


// --- FILE: src/index.js ---
// El punto de entrada de la aplicación.

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


// --- FILE: src/firebaseConfig.js ---
// Centraliza la configuración e inicialización de Firebase.

import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

// Tu configuración de Firebase, obtenida de las variables de entorno.
const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
};

// Inicializa Firebase
const app = initializeApp(firebaseConfig);

// Exporta los servicios que necesitarás en la aplicación.
export const auth = getAuth(app);
export const db = getFirestore(app);
export const appId = 'binac-financial-dashboard';


// --- FILE: src/App.js ---
// El componente principal que gestiona la navegación por pestañas.

import React, { useState } from 'react';
import HomePage from './pages/HomePage';
import FinancialDashboardPage from './pages/FinancialDashboardPage';
import { BarChart2 } from 'lucide-react';

export default function App() {
    const [activeTab, setActiveTab] = useState('inicio');

    return (
        <div className="min-h-screen bg-gray-100">
            <nav className="bg-white shadow-md sticky top-0 z-40">
                <div className="container mx-auto px-6">
                    <div className="flex justify-between items-center py-4">
                        <div className="flex items-center">
                            <BarChart2 className="w-8 h-8 text-blue-600" />
                            <span className="text-2xl font-bold text-gray-800 ml-2">BINAC</span>
                        </div>
                        <div className="flex items-center space-x-2 sm:space-x-4">
                            <TabButton title="Inicio" isActive={activeTab === 'inicio'} onClick={() => setActiveTab('inicio')} />
                            <TabButton title="Panel Financiero" isActive={activeTab === 'panel'} onClick={() => setActiveTab('panel')} />
                        </div>
                    </div>
                </div>
            </nav>

            <main>
                {activeTab === 'inicio' && <HomePage />}
                {activeTab === 'panel' && <FinancialDashboardPage />}
            </main>
        </div>
    );
}

const TabButton = ({ title, isActive, onClick }) => (
    <button
        onClick={onClick}
        className={`px-3 py-2 rounded-md text-sm sm:text-base font-medium transition-colors duration-300 relative ${isActive ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}
    >
        {title}
        {isActive && <span className="absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600 rounded-full"></span>}
    </button>
);


// --- FILE: src/pages/HomePage.js ---
// La página de inicio de BINAC.

import React from 'react';
import { Target, Briefcase, Users, Lightbulb, BadgeCheck, TrendingUp } from 'lucide-react';

const HomePage = () => {
    const services = [
        { icon: <Briefcase className="w-10 h-10 text-blue-500" />, title: "Modelo de Negocio", description: "Diseña un plan sólido y viable." },
        { icon: <TrendingUp className="w-10 h-10 text-green-500" />, title: "Finanzas y Ventas", description: "Calcula costos y maximiza ingresos." },
        { icon: <Target className="w-10 h-10 text-red-500" />, title: "Marketing", description: "Promociona en redes y conecta con clientes." },
        { icon: <Users className="w-10 h-10 text-purple-500" />, title: "Liderazgo", description: "Gestiona equipos y fomenta el crecimiento." },
        { icon: <Lightbulb className="w-10 h-10 text-yellow-500" />, title: "Innovación", description: "Adapta y evoluciona en el mercado." },
        { icon: <BadgeCheck className="w-10 h-10 text-indigo-500" />, title: "Aspectos Legales", description: "Constituye tu empresa con seguridad." },
    ];

    return (
        <div className="bg-white text-gray-800">
            <section className="bg-gray-900 text-white">
                <div className="container mx-auto px-6 py-24 text-center">
                    <h1 className="text-4xl md:text-6xl font-extrabold leading-tight">DA EL SIGUIENTE PASO CON <span className="text-blue-400">BINAC</span></h1>
                    <p className="mt-4 text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">Te acompañamos en el camino del emprendimiento con herramientas, contenido y asesoría especializada para construir el negocio que sueñas.</p>
                    <button className="mt-8 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full transition duration-300 transform hover:scale-105">
                        Comienza Ahora
                    </button>
                </div>
            </section>
            <section className="container mx-auto px-6 py-20 text-center">
                <h2 className="text-3xl font-bold mb-4">Prepárate, Conecta y Crece</h2>
                <p className="text-gray-600 max-w-2xl mx-auto">Emprender es un desafío que requiere preparación, estrategia y decisiones inteligentes. En BINAC, te proporcionamos las herramientas prácticas y el conocimiento actualizado para que transformes tu idea en una realidad exitosa.</p>
            </section>
            <section className="bg-gray-50 py-20">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-12">
                        <h2 className="text-3xl font-bold">Capacitación Integral para Emprendedores</h2>
                        <p className="text-gray-600 mt-2">Cubrimos todas las áreas clave para el éxito de tu negocio.</p>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {services.map((service, index) => (
                            <div key={index} className="bg-white p-8 rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 flex flex-col items-center text-center">
                                <div className="bg-gray-100 p-4 rounded-full mb-4">{service.icon}</div>
                                <h3 className="text-xl font-bold mb-2">{service.title}</h3>
                                <p className="text-gray-600">{service.description}</p>
                            </div>
                        ))}
                    </div>
                </div>
            </section>
            <section className="container mx-auto px-6 py-20">
                <div className="bg-gray-800 text-white rounded-lg shadow-2xl p-12 text-center">
                    <h2 className="text-3xl font-bold mb-4">¿Listo para cambiar tu mentalidad y tomar acción?</h2>
                    <p className="text-gray-300 mb-8 max-w-xl mx-auto">Supera el miedo a empezar. Con la actitud, estrategia financiera y administrativa correctas, el éxito está a tu alcance.</p>
                    <button className="bg-white text-gray-900 font-bold py-3 px-8 rounded-full transition duration-300 transform hover:scale-105">
                        Únete a BINAC
                    </button>
                </div>
            </section>
            <footer className="bg-gray-900 text-gray-400">
                <div className="container mx-auto px-6 py-8 text-center">
                    <p>&copy; {new Date().getFullYear()} BINAC Prototipo. Todos los derechos reservados.</p>
                    <p className="text-sm mt-2">Un nuevo impulso para los emprendedores.</p>
                </div>
            </footer>
        </div>
    );
};

export default HomePage;


// --- FILE: src/pages/FinancialDashboardPage.js ---
// La página que contiene el panel financiero.

import React from 'react';
import { signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { collection, onSnapshot, query } from 'firebase/firestore';
import { auth, db } from '../firebaseConfig';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Plus, TrendingUp, TrendingDown, DollarSign, Percent } from 'lucide-react';
import StatCard from '../components/StatCard';
import TransactionList from '../components/TransactionList';
import TransactionModal from '../components/TransactionModal';
import CustomTooltip from '../components/CustomTooltip';

const FinancialDashboardPage = () => {
    const [user, setUser] = React.useState(null);
    const [isAuthReady, setIsAuthReady] = React.useState(false);
    const [transactions, setTransactions] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    const [isModalOpen, setIsModalOpen] = React.useState(false);
    const [editingTransaction, setEditingTransaction] = React.useState(null);

    React.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                setUser(currentUser);
            } else {
                try {
                    const token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                    if (token) {
                        await signInWithCustomToken(auth, token);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) { console.error("Error signing in:", error); }
            }
            setIsAuthReady(true);
        });
        return () => unsubscribe();
    }, []);

    React.useEffect(() => {
        if (!isAuthReady || !user) {
            if(isAuthReady && !user) setLoading(false);
            return;
        };
        
        setLoading(true);
        const { appId } = require('../firebaseConfig');
        const transactionsCollectionPath = `/artifacts/${appId}/users/${user.uid}/transactions`;
        const q = query(collection(db, transactionsCollectionPath));

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const transactionsData = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                date: doc.data().date?.toDate ? doc.data().date.toDate().toISOString().split('T')[0] : new Date().toISOString().split('T')[0]
            }));
            transactionsData.sort((a, b) => new Date(b.date) - new Date(a.date));
            setTransactions(transactionsData);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching transactions:", error);
            setLoading(false);
        });

        return () => unsubscribe();
    }, [isAuthReady, user]);

    const { totalIncome, totalExpenses, netProfit, profitability } = React.useMemo(() => {
        const income = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + Number(t.amount), 0);
        const expenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + Number(t.amount), 0);
        const profit = income - expenses;
        const profMargin = income > 0 ? (profit / income) * 100 : 0;
        return { totalIncome: income, totalExpenses: expenses, netProfit: profit, profitability: profMargin };
    }, [transactions]);

    const expenseByCategory = React.useMemo(() => {
        const categoryMap = {};
        transactions.filter(t => t.type === 'expense').forEach(t => {
            categoryMap[t.category] = (categoryMap[t.category] || 0) + Number(t.amount);
        });
        return Object.entries(categoryMap).map(([name, value]) => ({ name, value }));
    }, [transactions]);

    const monthlyData = React.useMemo(() => {
        const dataByMonth = {};
        transactions.forEach(t => {
            const month = new Date(t.date).toLocaleString('default', { month: 'short', year: 'numeric' });
            if (!dataByMonth[month]) {
                dataByMonth[month] = { name: month, Ingresos: 0, Gastos: 0 };
            }
            t.type === 'income' ? dataByMonth[month].Ingresos += Number(t.amount) : dataByMonth[month].Gastos += Number(t.amount);
        });
        return Object.values(dataByMonth).sort((a, b) => new Date(a.name) - new Date(b.name));
    }, [transactions]);

    const openModal = (transaction = null) => {
        setEditingTransaction(transaction);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setEditingTransaction(null);
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center h-screen bg-gray-100"><div className="text-center"><svg className="animate-spin h-10 w-10 text-blue-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg><p className="mt-2 text-gray-600">Cargando datos del panel...</p></div></div>
        );
    }

    return (
        <div className="bg-gray-50 min-h-screen font-sans text-gray-800">
            <div className="container mx-auto p-4 sm:p-6 lg:p-8">
                <header className="mb-8">
                    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                        <div>
                            <h1 className="text-3xl sm:text-4xl font-bold text-gray-900">Panel Financiero</h1>
                            <p className="text-gray-500 mt-1">Tu centro de control de negocios.</p>
                        </div>
                        <button onClick={() => openModal()} className="mt-4 sm:mt-0 flex items-center gap-2 bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-blue-700 transition-all duration-300 transform hover:scale-105"><Plus size={20} />Añadir Transacción</button>
                    </div>
                </header>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <StatCard icon={<TrendingUp size={28} className="text-green-500" />} title="Ingresos Totales" value={totalIncome} isCurrency={true} />
                    <StatCard icon={<TrendingDown size={28} className="text-red-500" />} title="Gastos Totales" value={totalExpenses} isCurrency={true} />
                    <StatCard icon={<DollarSign size={28} className="text-blue-500" />} title="Rentabilidad Neta" value={netProfit} isCurrency={true} color={netProfit >= 0 ? 'text-green-600' : 'text-red-600'} />
                    <StatCard icon={<Percent size={28} className="text-purple-500" />} title="Margen de Rentabilidad" value={profitability} isCurrency={false} unit="%" color={profitability >= 0 ? 'text-green-600' : 'text-red-600'} />
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 mb-8">
                    <div className="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg">
                        <h3 className="text-xl font-semibold mb-4">Ingresos vs. Gastos Mensuales</h3>
                        <div style={{ width: '100%', height: 300 }}>
                            <ResponsiveContainer>
                                <BarChart data={monthlyData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                                    <CartesianGrid strokeDasharray="3 3" vertical={false} /><XAxis dataKey="name" tick={{ fill: '#6B7280', fontSize: 12 }} /><YAxis tickFormatter={(value) => `$${(value / 1000)}k`} tick={{ fill: '#6B7280', fontSize: 12 }} /><Tooltip content={<CustomTooltip />} /><Legend /><Bar dataKey="Ingresos" fill="#22C55E" radius={[4, 4, 0, 0]} /><Bar dataKey="Gastos" fill="#EF4444" radius={[4, 4, 0, 0]} />
                                </BarChart>
                            </ResponsiveContainer>
                        </div>
                    </div>
                    <div className="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg">
                        <h3 className="text-xl font-semibold mb-4">Distribución de Gastos</h3>
                        <div style={{ width: '100%', height: 300 }}>
                            <ResponsiveContainer>
                                <PieChart>
                                    <Pie data={expenseByCategory} cx="50%" cy="50%" labelLine={false} outerRadius={100} fill="#8884d8" dataKey="value" label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}>
                                        {expenseByCategory.map((entry, index) => (<Cell key={`cell-${index}`} fill={['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF'][index % 5]} />))}
                                    </Pie>
                                    <Tooltip formatter={(value) => `$${value.toLocaleString()}`} />
                                </PieChart>
                            </ResponsiveContainer>
                        </div>
                    </div>
                </div>
                <TransactionList transactions={transactions} onEdit={openModal} userId={user?.uid} />
                {isModalOpen && <TransactionModal isOpen={isModalOpen} onClose={closeModal} transaction={editingTransaction} userId={user.uid} />}
            </div>
        </div>
    );
};

export default FinancialDashboardPage;


// --- FILE: src/components/StatCard.js ---
// Un componente reutilizable para mostrar una métrica.

import React from 'react';

const StatCard = ({ icon, title, value, isCurrency, unit, color }) => (
    <div className="bg-white p-6 rounded-xl shadow-lg flex items-center gap-4 transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
        <div className="bg-gray-100 p-3 rounded-full">{icon}</div>
        <div>
            <p className="text-sm text-gray-500">{title}</p>
            <p className={`text-2xl font-bold ${color || 'text-gray-900'}`}>{isCurrency ? `$${value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : `${value.toFixed(2)}${unit || ''}`}</p>
        </div>
    </div>
);

export default StatCard;


// --- FILE: src/components/CustomTooltip.js ---
// Un tooltip personalizado para los gráficos.

import React from 'react';

const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
        return (
            <div className="bg-white/80 backdrop-blur-sm p-3 rounded-lg shadow-lg border border-gray-200">
                <p className="font-bold text-gray-800">{label}</p>
                <p className="text-green-600">{`Ingresos: $${payload[0].value.toLocaleString()}`}</p>
                <p className="text-red-600">{`Gastos: $${payload[1].value.toLocaleString()}`}</p>
            </div>
        );
    }
    return null;
};

export default CustomTooltip;


// --- FILE: src/components/TransactionList.js ---
// Muestra la tabla de transacciones.

import React from 'react';
import { doc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { Edit, Trash2 } from 'lucide-react';

const TransactionList = ({ transactions, onEdit, userId }) => {
    const handleDelete = async (id) => {
        if (window.confirm('¿Estás seguro de que quieres eliminar esta transacción?')) {
            try {
                const { appId } = require('../firebaseConfig');
                await deleteDoc(doc(db, `/artifacts/${appId}/users/${userId}/transactions/${id}`));
            } catch (error) {
                console.error("Error deleting transaction: ", error);
                alert("Hubo un error al eliminar la transacción.");
            }
        }
    };
    return (
        <div className="bg-white p-4 sm:p-6 rounded-xl shadow-lg">
            <h3 className="text-xl font-semibold mb-4">Transacciones Recientes</h3>
            <div className="overflow-x-auto">
                <table className="w-full text-left">
                    <thead>
                        <tr className="border-b-2 border-gray-100">
                            <th className="p-3 text-sm font-semibold text-gray-500">Fecha</th>
                            <th className="p-3 text-sm font-semibold text-gray-500">Descripción</th>
                            <th className="p-3 text-sm font-semibold text-gray-500 hidden md:table-cell">Categoría</th>
                            <th className="p-3 text-sm font-semibold text-gray-500 text-right">Monto</th>
                            <th className="p-3 text-sm font-semibold text-gray-500 text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        {transactions.length > 0 ? (
                            transactions.map(t => (
                                <tr key={t.id} className="border-b border-gray-100 hover:bg-gray-50">
                                    <td className="p-3 text-sm">{new Date(t.date).toLocaleDateString()}</td>
                                    <td className="p-3 font-medium">{t.description}</td>
                                    <td className="p-3 text-sm hidden md:table-cell">{t.category || 'N/A'}</td>
                                    <td className={`p-3 text-right font-semibold ${t.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>
                                        {t.type === 'income' ? '+' : '-'} ${Number(t.amount).toLocaleString()}
                                    </td>
                                    <td className="p-3 text-center">
                                        <div className="flex justify-center items-center gap-2">
                                            <button onClick={() => onEdit(t)} className="text-blue-500 hover:text-blue-700 p-1"><Edit size={16} /></button>
                                            <button onClick={() => handleDelete(t.id)} className="text-red-500 hover:text-red-700 p-1"><Trash2 size={16} /></button>
                                        </div>
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr><td colSpan="5" className="text-center p-8 text-gray-500">No hay transacciones todavía.</td></tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default TransactionList;


// --- FILE: src/components/TransactionModal.js ---
// El modal para añadir o editar una transacción.

import React, { useState, useEffect } from 'react';
import { doc, updateDoc, addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { X } from 'lucide-react';

const TransactionModal = ({ isOpen, onClose, transaction, userId }) => {
    const CATEGORIES = ["Ventas", "Servicios", "Marketing", "Suministros", "Salarios", "Alquiler", "Impuestos", "Transporte", "Tecnología", "Otro"];
    const [type, setType] = useState('expense');
    const [amount, setAmount] = useState('');
    const [description, setDescription] = useState('');
    const [category, setCategory] = useState(CATEGORIES[2]);
    const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
    const [error, setError] = useState('');

    useEffect(() => {
        if (transaction) {
            setType(transaction.type);
            setAmount(transaction.amount);
            setDescription(transaction.description);
            setCategory(transaction.category || CATEGORIES[2]);
            setDate(transaction.date);
        } else {
            setType('expense'); setAmount(''); setDescription(''); setCategory(CATEGORIES[2]); setDate(new Date().toISOString().split('T')[0]);
        }
    }, [transaction, isOpen]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!amount || !description || !date || Number(amount) <= 0) {
            setError('Por favor, completa todos los campos con valores válidos.');
            return;
        }
        setError('');
        const transactionData = { type, amount: Number(amount), description, category: type === 'expense' ? category : '', date: new Date(date) };
        try {
            const { appId } = require('../firebaseConfig');
            const collectionPath = `/artifacts/${appId}/users/${userId}/transactions`;
            if (transaction) {
                await updateDoc(doc(db, collectionPath, transaction.id), transactionData);
            } else {
                await addDoc(collection(db, collectionPath), { ...transactionData, createdAt: serverTimestamp() });
            }
            onClose();
        } catch (err) {
            console.error("Error saving transaction: ", err);
            setError("No se pudo guardar la transacción.");
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-md">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold">{transaction ? 'Editar' : 'Añadir'} Transacción</h2>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600"><X size={24} /></button>
                </div>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">Tipo</label>
                        <div className="flex rounded-md shadow-sm">
                            <button type="button" onClick={() => setType('income')} className={`flex-1 py-2 px-4 border ${type === 'income' ? 'bg-green-500 text-white' : 'bg-white'} rounded-l-md`}>Ingreso</button>
                            <button type="button" onClick={() => setType('expense')} className={`flex-1 py-2 px-4 border ${type === 'expense' ? 'bg-red-500 text-white' : 'bg-white'} rounded-r-md`}>Gasto</button>
                        </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label htmlFor="amount" className="block text-sm font-medium text-gray-700">Monto</label>
                            <input type="number" id="amount" value={amount} onChange={e => setAmount(e.target.value)} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                        </div>
                        <div>
                            <label htmlFor="date" className="block text-sm font-medium text-gray-700">Fecha</label>
                            <input type="date" id="date" value={date} onChange={e => setDate(e.target.value)} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                        </div>
                    </div>
                    <div className="mb-4">
                        <label htmlFor="description" className="block text-sm font-medium text-gray-700">Descripción</label>
                        <input type="text" id="description" value={description} onChange={e => setDescription(e.target.value)} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    {type === 'expense' && (
                        <div className="mb-6">
                            <label htmlFor="category" className="block text-sm font-medium text-gray-700">Categoría</label>
                            <select id="category" value={category} onChange={e => setCategory(e.target.value)} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                                {CATEGORIES.map(cat => <option key={cat} value={cat}>{cat}</option>)}
                            </select>
                        </div>
                    )}
                    {error && <p className="text-red-500 text-sm mb-4">{error}</p>}
                    <div className="flex justify-end gap-4">
                        <button type="button" onClick={onClose} className="py-2 px-4 bg-gray-200 rounded-lg">Cancelar</button>
                        <button type="submit" className="py-2 px-4 bg-blue-600 text-white rounded-lg">{transaction ? 'Guardar' : 'Añadir'}</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default TransactionModal;
